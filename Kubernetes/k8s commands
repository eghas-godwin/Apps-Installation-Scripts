#Check the location and credentials that kubectl knows about with this command
kubectl config view

kubectl get pods -o wide -n kube-system
kubectl get pods --all-namespaces
kubectl get pods 
kubectl get nodes
kubectl create ns dev #to create namespace called dev


kubectl get deploy -o wide -n dep
 kubectl scale deploy webapp --replicas=3 -n dev  #increase running pods to 3
kubectl edit deployment webapp -n dep
kubectl rollout history deployment webapp -n dep
kubectl rollout undo deploy -n dep
kubectl rollout undo deploy -n dep --to-revision=2
kubectl rollout undo deploy/webapp -n dep --to-revision=1
kubectl get rs -o wide -n dep

Deploy Sample Application
==========================

kubectl run nginx-demo --image=nginx --port=80 

kubectl expose deployment nginx-demo --port=80 --type=NodePort


Get Node Port details 
=====================
kubectl get services
 
 alias k=kubectl
 k api-resources

# Label node 
kubectl label node <nodeName>   node-role.kubernetes.io/worker=worker

 alias k=kubectl


# Columnar output
$ kubectl get services                          # List all services in the namespace
$ kubectl get pods --all-namespaces             # List all pods in all namespaces
$ kubectl get pods -o wide                      # List all pods in the namespace, with more details
$ kubectl get rc <rc-name>                      # List a particular replication controller
$ kubectl get replicationcontroller <rc-name>   # List a particular RC

# Verbose output
$ kubectl describe nodes <node-name>
$ kubectl describe pods <pod-name>
$ kubectl describe pods/<pod-name>              # Equivalent to previous
$ kubectl describe pods <rc-name>               # Lists pods created by <rc-name> using common prefix



# List Services Sorted by Name
$ kubectl get services --sort-by=.metadata.name

# List pods Sorted by Restart Count
$ kubectl get pods --sort-by=.status.containerStatuses[0].restartCount

$ kubectl label pods <pod-name> new-label=awesome                  # Add a Label
$ kubectl annotate pods <pod-name> icon-url=http://goo.gl/XXBTWq   # Add an annotation
$ kubectl logs <pod-name>         # dump pod logs (stdout)
$ kubectl logs -f <pod-name>      # stream pod logs (stdout) until canceled (ctrl-c) or timeout

$ kubectl run -i --tty busybox --image=busybox -- sh      # Run pod as interactive shell
$ kubectl attach <podname> -i                             # Attach to Running Container
$ kubectl port-forward <podname> <local-and-remote-port>  # Forward port of Pod to your local machine
$ kubectl port-forward <servicename> <port>               # Forward port to service
$ kubectl exec <pod-name> -- ls /                         # Run command in existing pod (1 container case) 
$ kubectl exec <pod-name> -c <container-name> -- ls /     # Run command in existing pod (multi-container case) 

If you have already installed kubectl and it is pointing to some other environment, such as minikube or a GKE cluster, 
ensure you change the context so that kubectl is pointing to docker-desktop:
kubectl config get-contexts
kubectl config use-context docker-desktop

kubeadm version  #To get kubernetes version
kubectl api-versions #To get kubernetes objects api-version
